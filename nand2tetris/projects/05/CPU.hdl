// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    ALU(x=dOut,y=op2,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=aluOut,zr=zr,ng=ng);

    //check if jump instruction
    Or(a=instruction[0],b=instruction[1],out=jOut1);
    Or(a=jOut1,b=instruction[2],out=jOut2);
    And(a=jOut2,b=instruction[15],out=jIns);

    //select between A or M for operand2 of ALU
    Mux16(a=aOut,b=inM,sel=instruction[12],out=op2);

    Not(in=instruction[15],out=notinstruction15);
    Or(a=instruction[5],b=notinstruction15,out=or3);

    Mux16(a[15]=false,a[0..14]=instruction[0..14],b=aluOut,sel=instruction[15],out=muxOut1);

    ARegister(in=muxOut1,load=or3,out[0..14]=addressM,out=aOut);


    And(a=instruction[4],b=instruction[15],out=and2);    
    DRegister(in=muxOut1,load=and2,out=dOut);

    //outM=aluOut;
    //writeM=instruction[3];
    Mux16(a=false,b=aluOut,sel=instruction[3],out=outM);
    And(a=instruction[3],b=instruction[15],out=writeM);

    Not(in=zr,out=notzr);
    Not(in=ng,out=notng);

    And(a=notzr,b=notng,out=and1);
    Or(a=zr,b=notng,out=or1);
    Or(a=zr,b=ng,out=or2);

    //using this mux because simple Mux8Way wasn't built
    Mux8Way16(a[0]=false,b[0]=and1,c[0]=zr,d[0]=or1,e[0]=ng,f[0]=notzr,g[0]=or2,h[0]=true,sel=instruction[0..2],out[0]=jSel);

    And(a=jSel,b=instruction[15],out=and3);
    PC(in=aOut,load=and3,inc=true,reset=reset,out[0..14]=pc);
}